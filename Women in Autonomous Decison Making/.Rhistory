caption=paste0("Data Source: World Bank\n",
"Last Update 2023/01/31\n",
"Author: Midega George")) +
ggrepel::geom_label_repel(aes(label= country_code), data=country_labels,
size=2.5, max.overlaps = 25, label.size=0,
arrow=arrow(length=unit(0.006, 'cm'))) +
theme_map()+
theme(legend.position = "bottom")
runApp('ShinyApp')
map_data("state")
country_labels
row.names(USArrests)
st.abb
st.center
USArrests
state
state.abb
state.center
country_labels
runApp('ShinyApp')
country_labels
runApp('ShinyApp')
country_labels <- africa_countries %>%
left_join(plot_indicators, by=c("Country"="region")) %>%
distinct(Country, .keep_all=TRUE) %>%
select(-c("long", "lat", "year", "indicator", "score", "Continent")) %>%
mutate(across(c(country_code), factor)) %>%
rename(lat=latitude, long=longitude)
country_labels
runApp('ShinyApp')
runApp('C:/Users/mideg/Desktop/DS Projects/Clients/Nezbit/americacare BI/dashboard')
runApp('ShinyApp')
africa_countries
state.center
state.center$y
names(africa_countries)
names(africa_map)
africa_countries %>%
left_join(africa_map, by=c("Country"="region"))
africa_countries %>%
left_join(africa_map, by=c("Country"="region"))%>%
distinct(Country, .keep_all=TRUE) %>%
select(-c("long", "lat", "year", "Continent")) %>%
mutate(across(c(country_code), factor)) %>%
rename(lat=latitude, long=longitude, region=Country)
africa_countries %>%
left_join(africa_map, by=c("Country"="region"))%>%
distinct(Country, .keep_all=TRUE) %>%
select(-c("long", "lat", "Continent")) %>%
mutate(across(c(country_code), factor)) %>%
rename(lat=latitude, long=longitude, region=Country)
runApp('ShinyApp')
ggplot(plot_response, aes(x=long, y=lat, group=group))+
coord_fixed(1)+
geom_polygon(aes(fill=response), color="#ffefdb")
ggplot(plot_response, aes(x=long, y=lat, group=group))+
coord_fixed(1)+
geom_polygon(aes(fill=response), color="#ffefdb")
library(tidyverse, quietly=TRUE)
raw_data <- read.csv("equality_business_law.csv", na="..")[, -c(2, 4)]
clean_1 <- raw_data %>%
pivot_longer(cols=contains("..YR", ignore.case=FALSE), names_to="year",
values_to="values") %>%
rename(region=Country.Name, variables=Series.Name)%>%
pivot_wider(., names_from=variables, values_from=values) %>%
mutate(year=str_sub(year, 2, 5),
across(year, as.numeric),
region=recode(region,
"Cabo Verde" = "Cape Verde",
"Congo, Dem. Rep." = "Democratic Republic of the Congo",
"Congo, Rep." = "Republic of Congo",
"Cote d'Ivoire" = "Ivory Coast",
"Egypt, Arab Rep." = "Egypt",
"Gambia, The" = "Gambia",
"Eswatini" = "Swaziland"))
biz_law_1 <- clean_1[, 1:11]
equality_1 <- clean_1[, c(1:2, 12:25)]
recode.biz_law <- c("region", "year", "Assets", "Entrepreneurship",
"Marriage", "Mobility", "Parenthood", "Pay", "Pension",
"Workplace", "Overall")
colnames(biz_law_1) <- recode.biz_law
biz_law <- biz_law_1 %>%
pivot_longer(cols=recode.biz_law[3:11], names_to="indicator",
values_to="score")
# Selecting only African Continents
continents <- read.csv("africa_clean_coords.csv")
africa_countries <- continents %>%
filter(Continent == "Africa")
africa_map <- map_data("world", region=africa_countries$Country)
# Filter data to plot
indicators <- biz_law %>%
filter(year==2021, indicator == "Assets")
# Data to plot
plot_indicators <- africa_map %>%
left_join(indicators, by=c("region"))
# Labels to use
country_labels <- africa_countries %>%
left_join(plot_indicators, by=c("Country"="region")) %>%
distinct(Country, .keep_all=TRUE) %>%
select(-c("long", "lat", "year", "indicator", "score", "Continent")) %>%
rename(lat=latitude, long=longitude)
# Visualization
theme_map <- function(...){
theme(
axis.text=element_blank(),
axis.ticks=element_blank(),
axis.title=element_blank(),
rect=element_blank(),
axis.line = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(fill = "#fffdfd"),
plot.background = element_rect(fill="#fffdfd"),
plot.title = element_text(hjust = 0.5),
legend.title=element_text(size=10),
legend.text=element_text(size=10),
...)
}
plot_indicators %>%
ggplot(aes(x=long, y=lat, group=group))+
coord_equal()+
geom_polygon(aes(fill=score), color="#ffefdb")+
scale_fill_continuous(name=paste0(unique(indicators$indicator),
" Indicator Score (%)"),
type="viridis", guide=guide_colorbar(
direction = "horizontal", label.position = "bottom",
barheight = unit(2, units = "mm"),
barwidth = unit(50, units = "mm"),
draw.ulim = F, title.position = 'top',
title.hjust = 0.5, label.hjust = 0.5))+
labs(
title=paste0("Women, Business and the Law: ",
{unique(indicators$indicator)},
" Indicator Score, ", {unique(indicators$year)}),
caption=paste0("Data Source: World Bank\n",
"Last Update 2023/01/31\n",
"Author: Midega George")) +
ggrepel::geom_label_repel(aes(label= country_code), data=country_labels,
size=2.5, max.overlaps = 25, label.size=0,
arrow=arrow(length=unit(0.006, 'cm'))) +
theme_map()+
theme(legend.position = "bottom")
recode.equality <- c("region", "year",  "apply for passport",
"be head of household", "choose where to live",
"get a job", "obtain a judgment of divorce",
"open a bank account", "register a business",
"sign a contract", "travel outside her home",
"travel outside the country", "work at night",
"work in job deemed dangerous",
"work in an industrial job", "remarry")
colnames(equality_1) <- recode.equality
equality <- equality_1 %>%
pivot_longer(cols=recode.equality[3:16], names_to="opinion",
values_to="response") %>%
mutate(across(response, ~replace_na(., 3)),
across(c(response), factor))
# Filter Data to Plot
all_response <- equality %>%
filter(year==2021, opinion=="choose where to live")
# Data to Plot
plot_response <- africa_map %>%
left_join(all_response, by=c("region"))
# Labels to use
country_labels <- africa_countries %>%
left_join(plot_response, by=c("Country"="region")) %>%
distinct(Country, .keep_all=TRUE) %>%
select(-c("long", "lat", "Continent", "year", "opinion", "response")) %>%
rename(lat=latitude, long=longitude)
# Map Plot
ggplot(plot_response, aes(x=long, y=lat, group=group))+
coord_fixed(1)+
geom_polygon(aes(fill=response), color="#ffefdb")+
scale_fill_manual(values=c("#0b84a5", "#f17853", "#ffb600"),
labels=(c("No", "Yes", "No Data")),
guide=guide_legend(title.position="top",
label.hjust=0.5, title.hjust=0.5,
keywidth=unit(2, units="mm")),
name=unique(all_response$opinion)) +
labs(title=paste0("A woman can ", {unique(all_response$opinion)},
" the same way as a man, ", {unique(all_response$year)}),
caption=paste0("Data Source: World Bank\n", "Last Update 2023/01/31\n",
"Author: Midega George")) +
ggrepel::geom_label_repel(aes(label= country_code), data= country_labels,
size=2.5, max.overlaps = 25, label.size=0,
arrow=arrow(length=unit(0.1, 'cm'))) +
theme_map()
#ggsave("plots/live.png", bg="white", width=8)
ggplot(plot_response, aes(x=long, y=lat, group=group))+
coord_fixed(1)+
geom_polygon(aes(fill=response), color="#ffefdb")
runApp('ShinyApp')
country_labels <- africa_countries %>%
left_join(africa_map, by=c("Country"="region"))%>%
distinct(Country, .keep_all=TRUE) %>%
select(-c("long", "lat", "Continent")) %>%
mutate(across(c(country_code), factor)) %>%
rename(lat=latitude, long=longitude, region=Country)
country_labels
country_labels %>%
filter(country_code == "DZ")
country_labels %>%
filter(country_code == "DZ") %>%
select(region)
runApp('ShinyApp')
country_labels %>%
filter(country_code == "DZ") %>%
select(region)[1]
country_labels %>%
filter(country_code == "DZ") %>%
select(region)[1]
country_labels %>%
filter(country_code == "DZ") %>%
select(region)
country_labels %>%
filter(country_code == "DZ") %>%
select(region)[[1]]
country_labels %>%
filter(country_code == "DZ") %>%
select(region)
(country_labels %>%
filter(country_code == "DZ") %>%
select(region))[1]
(country_labels %>%
filter(country_code == "DZ") %>%
select(region))[[1]]
runApp('ShinyApp')
2^2/2
42^2/42
large.means <- function(mean1, sd1, n1, mean2, sd2, n2, dif) {
numerator <- (mean1 - mean2) - dif
denominator <- sqrt((sd1^2/n1) + (sd2^2/n2))
numerator / denominator
}
large.means(9.31, 4.61, 100, 7.40, 4.04, 100, 0)
pooled.var <- function(n1, sd1, n2, sd2) {
numerator <- ((n1 - 1) * sd1^2) + ((n2 - 1) * sd2^2)
denominator <- n1 + n2 - 2
numerator/denominator
}
large.prop <- function(mean1, sd1, n1, mean2, sd2, n2, dif) {
numerator <- (mean1 - mean2) - dif
denominator <- sqrt(pooled.var(n1, sd1, n2, sd2)*(1/n1 + 1/n2))
numerator / denominator
}
large.prop(9.06, 4.68, 10, 7.83, 4.21, 10, 0)
large.prop <- function(success1, n1, success2, n2, dif) {
numerator <- (success1/n1 - success2/n2) - dif
over.prop <- prop.both(success1, n1, success2, n2)
denominator <- sqrt(over.prop * (1 - over.prop) * (1/n1 + 1/n2))
numerator / denominator
}
prop.both <- function(success1, n1, success2, n2){
(success1 + success2) / (n1 + n2)
}
large.prop(555, 1500, 578, 1750, 0)
# Large Independent Sample
## Means
large.means <- function(mean1, sd1, n1, mean2, sd2, n2, dif) {
numerator <- (mean1 - mean2) - dif
denominator <- sqrt((sd1^2/n1) + (sd2^2/n2))
numerator / denominator
}
## Proportions
prop.both <- function(success1, n1, success2, n2){
(success1 + success2) / (n1 + n2)
}
large.prop <- function(success1, n1, success2, n2, dif) {
numerator <- (success1/n1 - success2/n2) - dif
over.prop <- prop.both(success1, n1, success2, n2)
denominator <- sqrt(over.prop * (1 - over.prop) * (1/n1 + 1/n2))
numerator / denominator
}
# Small Independent Sample Means
pooled.var <- function(n1, sd1, n2, sd2) {
numerator <- ((n1 - 1) * sd1^2) + ((n2 - 1) * sd2^2)
denominator <- n1 + n2 - 2
numerator/denominator
}
small.means <- function(mean1, sd1, n1, mean2, sd2, n2, dif) {
numerator <- (mean1 - mean2) - dif
denominator <- sqrt(pooled.var(n1, sd1, n2, sd2)*(1/n1 + 1/n2))
numerator / denominator
}
# Paired Difference Sample Means
# Large Independent Sample
## Means
large.means <- function(mean1, sd1, n1, mean2, sd2, n2, dif) {
numerator <- (mean1 - mean2) - dif
denominator <- sqrt((sd1^2/n1) + (sd2^2/n2))
numerator / denominator
}
## Proportions
prop.both <- function(success1, n1, success2, n2){
(success1 + success2) / (n1 + n2)
}
large.prop <- function(success1, n1, success2, n2, dif) {
numerator <- (success1/n1 - success2/n2) - dif
over.prop <- prop.both(success1, n1, success2, n2)
denominator <- sqrt(over.prop * (1 - over.prop) * (1/n1 + 1/n2))
numerator / denominator
}
# Small Independent Sample Means
pooled.var <- function(n1, sd1, n2, sd2) {
numerator <- ((n1 - 1) * sd1^2) + ((n2 - 1) * sd2^2)
denominator <- n1 + n2 - 2
numerator/denominator
}
small.means <- function(mean1, sd1, n1, mean2, sd2, n2, dif) {
numerator <- (mean1 - mean2) - dif
denominator <- sqrt(pooled.var(n1, sd1, n2, sd2)*(1/n1 + 1/n2))
numerator / denominator
}
# Paired Difference Sample Means
paired.mean <- function(mean1, mean2, sd1, sd2, n, dif) {
((mean1 - mean2) / dif) / ((sd1 - sd2)/sqrt(n))
}
paired.means <- function(mean1, mean2, sd1, sd2, n, dif) {
((mean1 - mean2) / dif) / ((sd1 - sd2)/sqrt(n))
}
paired.means(34.9, 31.6, 6.9, 6.2, 16, 0)
paired.means <- function(mean1, mean2, sd1, sd2, n, dif) {
((mean1 - mean2) - dif) / ((sd1 - sd2)/sqrt(n))
}
paired.means(34.9, 31.6, 6.9, 6.2, 16, 0)
34.9-31.6
6.9 - 6.2
paired.means <- function(mean_diff, sd_diff, n, dif) {
(mean_diff - dif) / (sd_diff / sqrt(n))
}
paired.means(3.3, 4.5, 16, 0)
# Large Independent Sample
## Means
large.means <- function(mean1, sd1, n1, mean2, sd2, n2, dif) {
numerator <- (mean1 - mean2) - dif
denominator <- sqrt((sd1^2/n1) + (sd2^2/n2))
numerator / denominator
}
## Proportions
prop.both <- function(success1, n1, success2, n2){
(success1 + success2) / (n1 + n2)
}
large.prop <- function(success1, n1, success2, n2, dif) {
numerator <- (success1/n1 - success2/n2) - dif
over.prop <- prop.both(success1, n1, success2, n2)
denominator <- sqrt(over.prop * (1 - over.prop) * (1/n1 + 1/n2))
numerator / denominator
}
# Small Independent Sample Means
pooled.var <- function(n1, sd1, n2, sd2) {
numerator <- ((n1 - 1) * sd1^2) + ((n2 - 1) * sd2^2)
denominator <- n1 + n2 - 2
numerator/denominator
}
small.means <- function(mean1, sd1, n1, mean2, sd2, n2, dif) {
numerator <- (mean1 - mean2) - dif
denominator <- sqrt(pooled.var(n1, sd1, n2, sd2)*(1/n1 + 1/n2))
numerator / denominator
}
# Paired Difference Sample Means
paired.means <- function(mean_diff, sd_diff, n, dif) {
(mean_diff - dif) / (sd_diff / sqrt(n))
}
two_small.ci <- function(mean1, sd1, n1, mean2, sd2, n2, t) {
mean_diff <- (mean1 - mean2)
pol_var <- pooled.var(n1, sd1, n2, sd2)
right_hs <- t * sqrt(pol_var(1/n1 + 1/n2))
cbind(mean_diff - right_hs, mean_diff + right_hs)
}
# Large Independent Sample Means
two_large.ci <- function(mean1, sd1, n1, mean2, sd2, n2, z) {
mean_diff <- (mean1 - mean2)
right_hs <- z * sqrt((sd1^2/n1) + (sd2^2/n2))
cbind(mean_diff - right_hs, mean_diff + right_hs)
}
# Small Independent Sample Means
pooled.var <- function(n1, sd1, n2, sd2) {
numerator <- ((n1 - 1) * sd1^2) + ((n2 - 1) * sd2^2)
denominator <- n1 + n2 - 2
numerator/denominator
}
two_small.ci <- function(mean1, sd1, n1, mean2, sd2, n2, t) {
mean_diff <- (mean1 - mean2)
pol_var <- pooled.var(n1, sd1, n2, sd2)
right_hs <- t * sqrt(pol_var(1/n1 + 1/n2))
cbind(mean_diff - right_hs, mean_diff + right_hs)
}
# Large Independent Sample Means
two_large.ci <- function(mean1, sd1, n1, mean2, sd2, n2, z) {
mean_diff <- (mean1 - mean2)
right_hs <- z * sqrt((sd1^2/n1) + (sd2^2/n2))
cbind(mean_diff - right_hs, mean_diff + right_hs)
}
# Large Independent Sample Proportions
two_prop.ci <- function(success1, n1, success2, n2, z) {
prop_diff <- success1/n1 - success2/n2
p1 <- (success1/n1 * (1 - success1/n1))/n1
p2 <- (success2/n2 * (1 - success2/n2))/n2
right_hs <- z * sqrt(p1 + p2)
cbind(prop_diff - right_hs, prop_diff + right_hs)
}
# Small Independent Sample Means
pooled.var <- function(n1, sd1, n2, sd2) {
numerator <- ((n1 - 1) * sd1^2) + ((n2 - 1) * sd2^2)
denominator <- n1 + n2 - 2
numerator/denominator
}
two_small.ci <- function(mean1, sd1, n1, mean2, sd2, n2, t) {
mean_diff <- (mean1 - mean2)
pol_var <- pooled.var(n1, sd1, n2, sd2)
right_hs <- t * sqrt(pol_var(1/n1 + 1/n2))
cbind(mean_diff - right_hs, mean_diff + right_hs)
}
# Paired Difference Sample Mean
pair_large.ci <- function(mean_diff, sd_diff, n, z) {
right_hs <- z * (sd_diff / sqrt(n))
cbind(mean_diff - right_hs, mean_diff + right_hs)
}
pair_small.ci <- function(mean_diff, sd_diff, n, t) {
right_hs <- z * (sd_diff / sqrt(n))
cbind(mean_diff - right_hs, mean_diff + right_hs)
}
# For Mean
sample_mean.within <- function(z, sd1, sd2, se) {
(z^2 * (sd1^2 + sd2^2)) / se^2
}
sample_mean.ci_width <- function(z, sd1, sd2, se){
(z^2 * (sd1^2 + sd2^2)) / (se/2)^2
}
# For Proportion
sample_prop.within <- function(z, prop1, prop2, se) {
z^2 * ((prop1 * (1 - prop1)) + (prop2 * (1 - prop2))) / se^2
}
sample_prop.ci_width <- function(z, prop1, prop2, se) {
z^2 * ((prop1 * (1 - prop1)) + (prop2 * (1 - prop2))) / (se/2)^2
}
# Large Independent Sample Means
two_large.ci <- function(mean1, sd1, n1, mean2, sd2, n2, z) {
mean_diff <- (mean1 - mean2)
right_hs <- z * sqrt((sd1^2/n1) + (sd2^2/n2))
cbind(mean_diff - right_hs, mean_diff + right_hs)
}
# Large Independent Sample Proportions
two_prop.ci <- function(success1, n1, success2, n2, z) {
prop_diff <- success1/n1 - success2/n2
p1 <- (success1/n1 * (1 - success1/n1))/n1
p2 <- (success2/n2 * (1 - success2/n2))/n2
right_hs <- z * sqrt(p1 + p2)
cbind(prop_diff - right_hs, prop_diff + right_hs)
}
# Small Independent Sample Means
pooled.var <- function(n1, sd1, n2, sd2) {
numerator <- ((n1 - 1) * sd1^2) + ((n2 - 1) * sd2^2)
denominator <- n1 + n2 - 2
numerator/denominator
}
two_small.ci <- function(mean1, sd1, n1, mean2, sd2, n2, t) {
mean_diff <- (mean1 - mean2)
pol_var <- pooled.var(n1, sd1, n2, sd2)
right_hs <- t * sqrt(pol_var(1/n1 + 1/n2))
cbind(mean_diff - right_hs, mean_diff + right_hs)
}
# Paired Difference Sample Mean
pair_large.ci <- function(mean_diff, sd_diff, n, z) {
right_hs <- z * (sd_diff / sqrt(n))
cbind(mean_diff - right_hs, mean_diff + right_hs)
}
pair_small.ci <- function(mean_diff, sd_diff, n, t) {
right_hs <- z * (sd_diff / sqrt(n))
cbind(mean_diff - right_hs, mean_diff + right_hs)
}
# Large Independent Sample
## Means
large.means <- function(mean1, sd1, n1, mean2, sd2, n2, dif) {
numerator <- (mean1 - mean2) - dif
denominator <- sqrt((sd1^2/n1) + (sd2^2/n2))
numerator / denominator
}
## Proportions
prop.both <- function(success1, n1, success2, n2){
(success1 + success2) / (n1 + n2)
}
large.prop <- function(success1, n1, success2, n2, dif) {
numerator <- (success1/n1 - success2/n2) - dif
over.prop <- prop.both(success1, n1, success2, n2)
denominator <- sqrt(over.prop * (1 - over.prop) * (1/n1 + 1/n2))
numerator / denominator
}
# Small Independent Sample Means
pooled.var <- function(n1, sd1, n2, sd2) {
numerator <- ((n1 - 1) * sd1^2) + ((n2 - 1) * sd2^2)
denominator <- n1 + n2 - 2
numerator/denominator
}
small.means <- function(mean1, sd1, n1, mean2, sd2, n2, dif) {
numerator <- (mean1 - mean2) - dif
denominator <- sqrt(pooled.var(n1, sd1, n2, sd2)*(1/n1 + 1/n2))
numerator / denominator
}
# Paired Difference Sample Means
paired.means <- function(mean_diff, sd_diff, n, dif) {
(mean_diff - dif) / (sd_diff / sqrt(n))
}
small.means(28.6, 12.5, 21, 24.9, 12.2, 21, 0)
paired.means(1.007, 1.209, 13)
paired.means(1.007, 1.209, 13, 0)
large.prop(159, 830, 133, 825, 0)
large.prop(133, 825, 159, 830, 0)
large.prop(555, 1500, 578, 1750, 0)
prop.both(555, 1500, 578, 1750)
small.means(2.90, 0.81, 12, 2.99, 0.95, 12, 0)
large.prop(359, 400, 378, 400, 0)
large.prop(41, 400, 22, 400, 0)
